import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useRef, useEffect, useState, useMemo } from 'react';
import { useInView } from 'react-intersection-observer';

import useGameList from '@/hooks/useGameList';
import useQueryParam from '@/hooks/useQueryParam';
import {
	fetcher,
	platformListURL,
	gameListFromQuery,
	gameListURL,
	gameListParams,
} from '@/modules/fetcher';
import SearchableDropdownMulti from '@/components/SearchableDropdownMulti';
import styled from 'styled-components';
import FilterDropdown from '@/components/FilterDropdown';
import GameCard from '@/components/GameCard';
import useDebounce from '@/hooks/useDebounce';

export async function getServerSideProps(context) {
	const availablePlatforms = await fetcher(platformListURL());

	if (availablePlatforms === undefined) {
		return {
			notFound: true,
		};
	}

	return {
		props: {
			availablePlatforms: availablePlatforms.results,
		},
	};
}

const ControlsContainer = styled.div`
	margin: auto;
	padding: 1rem;
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	gap: 1em;
	max-width: 1280px;
`;

const ControlWrapper = styled.div`
	flex: 2;
`;

const ControlWrapperBigger = styled(ControlWrapper)`
	flex: 3;
`;

const SearchWrapper = styled.div`
	width: 100%;
`;

const GameCardsContainer = styled.div`
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
	gap: 1rem;
	padding: 1rem;
	max-width: 1920px;
	margin: auto;

	@media (max-width: 500px) {
		grid-template-columns: 1fr;
		padding-inline: 0;
		gap: 0.5rem;
	}
`;

const LoadMore = styled.button`
	appearence: none;
	display: block;
	padding: 0.5rem 1rem;
	background: #ddd;
	border: none;
	border-radius: 0.25rem;
	margin: auto;

	cursor: pointer;

	&:disabled {
		cursor: revert;
	}
`;

const LoadMoreContainer = styled.div`
	padding-bottom: 1rem;
`;

const StyledSearch = styled.input`
	display: block;
	flex: 1;
	width: 100%;
	padding: 0.5rem 0.75rem;
	border: 1px solid #aaa;
	border-radius: 0.25rem;
	font-size: 1rem;
	min-width: 10ch;
`;

const filtersData = [
	{
		id: 0,
		label: 'По умолчанию',
		value: '',
		defaultAscending: true,
	},
	{
		id: 1,
		label: 'Рейтинг',
		value: 'rating',
		defaultAscending: false,
	},
	{
		id: 2,
		label: 'Дата выхода',
		value: 'released',
		defaultAscending: false,
	},
];

export default function Home({ availablePlatforms }) {
	const router = useRouter();
	const { page, searchQuery, platforms, filter } =
		gameListFromQuery(router.query);

	const [queryStr, setQueryStr] = useState(searchQuery ?? '');
	const debouncedQueryStr = useDebounce(queryStr, 600);
	useQueryParam('search', debouncedQueryStr);

	const [currentFilter, setCurrentFilter] = useState(filter ?? '');
	const debouncedCurrentFilter = useDebounce(currentFilter, 300);
	useQueryParam('ordering', debouncedCurrentFilter);

	const initialFilterData = useMemo(() => {
		const data = filtersData.find((data) =>
			currentFilter.includes(data.value)
		);
		if (data === undefined) {
			return filtersData[0];
		}

		return {
			...data,
			defaultAscending: data.value === currentFilter,
		};
	}, [filtersData, filter]);

	const [platformIDs, setPlatformIDs] = useState(platforms ?? []);
	const debouncedPlatformIDs = useDebounce(platformIDs, 300);

	const debouncedPlatformStr = useMemo(() => {
		return debouncedPlatformIDs?.join(',');
	}, [debouncedPlatformIDs]);
	useQueryParam('platforms', debouncedPlatformStr);

	const initialPlatformsData = useMemo(() => {
		const dataArray = [];
		if (platformIDs === undefined) {
			return dataArray;
		}

		for (const id of platformIDs) {
			const platform = availablePlatforms.find((p) => {
				return p.id === parseInt(id);
			});
			if (platform === undefined) continue;
			dataArray.push({
				id: platform.id,
				value: platform.id,
				label: platform.name,
			});
		}
		return dataArray;
	}, [availablePlatforms, platformIDs]);

	const {
		games,
		isLoading,
		isValidating,
		isFinished,
		error,
		currentPage,
		nextPage,
	} = useGameList(
		debouncedQueryStr,
		debouncedPlatformIDs,
		debouncedCurrentFilter
	);

	const [loadMoreRef, reachedBottom, entry] = useInView();

	useEffect(() => {
		if (
			!isLoading &&
			!isFinished &&
			currentPage >= 1 &&
			reachedBottom === true
		) {
			console.log('ads');
			nextPage();
		}
	}, [reachedBottom]);

	return (
		<>
			<Head>
				<title>Game Gallery</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<ControlsContainer>
					<ControlWrapper>
						<p>
							<strong>Фильтр</strong>
						</p>
						<FilterDropdown
							onChange={setCurrentFilter}
							dataArray={filtersData}
							initialData={initialFilterData}
						/>
					</ControlWrapper>

					<ControlWrapperBigger>
						<p>
							<strong>Платформы</strong>
						</p>
						<SearchableDropdownMulti
							onChange={setPlatformIDs}
							initialData={initialPlatformsData}
							dataArray={availablePlatforms.map(
								(platform) => ({
									id: platform.id,
									value: platform.id,
									label: platform.name,
								})
							)}
						/>
					</ControlWrapperBigger>
					<SearchWrapper>
						<p>
							<strong>Поиск</strong>
						</p>
						<StyledSearch
							placeholder="Поиск..."
							value={queryStr}
							onChange={(e) =>
								setQueryStr(e.target.value)
							}
						/>
					</SearchWrapper>
				</ControlsContainer>

				<GameCardsContainer>
					{!isLoading &&
						games.map((game) => (
							<GameCard
								key={game.id}
								name={game.name}
								slug={game.slug}
								rating={game.rating}
								released={game.released}
								posterURL={game.background_image}
							></GameCard>
						))}
				</GameCardsContainer>
				<LoadMoreContainer>
					<LoadMore
						ref={loadMoreRef}
						disabled={isFinished || isValidating}
						onClick={nextPage}
					>
						{isValidating ? 'Загрузка...' : 'Больше'}
					</LoadMore>
				</LoadMoreContainer>
			</main>
		</>
	);
}
