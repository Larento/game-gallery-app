import Head from 'next/head';
import Image from 'next/image';
import parse from 'html-react-parser';
import { parse as parseHTML } from 'node-html-parser';
import styled from 'styled-components';
import useSWR from 'swr';

import {
	fetcher,
	gameInfoURL,
	gameScreenshotsURL,
} from '@/modules/fetcher';

export async function getServerSideProps(context) {
	const { slug } = context.query;
	const gameInfo = await fetcher(gameInfoURL(slug));

	if (gameInfo === undefined) {
		return {
			notFound: true,
		};
	}

	try {
		const descriptionRoot = parseHTML(gameInfo.description);
		const hasSeveralParagraphs =
			descriptionRoot.childNodes.length > 1;
		for (const topNode of descriptionRoot.childNodes) {
			for (const childNode of topNode.childNodes) {
				if (childNode.tagName?.toLowerCase() === 'br') {
					if (!hasSeveralParagraphs) {
						const newParagraph =
							parseHTML('<p></p>').childNodes[0];
						newParagraph.set_content(
							childNode.nextSibling?.rawText ?? ''
						);
						descriptionRoot.appendChild(newParagraph);
						childNode.nextSibling?.remove();
					}
					childNode.remove();
				}
			}
		}
		gameInfo.description = descriptionRoot.outerHTML;
	} catch (e) {
		console.log(e);
	}

	return {
		props: {
			gameInfo: {
				...gameInfo,
				released: getFormattedDateStr(gameInfo.released),
			},
		},
	};
}

const Container = styled.div`
	position: relative;
	z-index: 2;
	padding: 2rem 1rem;
	margin: auto;
	max-width: 60ch;
`;

const Info = styled.div`
	padding: 0.75rem 1rem;
	background: whitesmoke;
	border-radius: 0.25rem;
	box-shadow: 0 2px 6px #0000000f;
	color: #222;
`;

const Description = styled.div`
	margin-top: 1em;
`;

const Slider = styled.div`
	z-index: 3;

	width: 100%;
	min-height: clamp(300px, 30vw, 500px);
	max-height: clamp(300px, 30vw, 500px);
	box-shadow: 0 5px 50px #00000f;
`;

const BackgroundImage = styled.div`
	position: relative;
	background-image: url('${(props) => props.src}');
	background-size: cover;
	flex: 1;

	&::before {
		z-index: 1;
		content: '';
		position: absolute;
		inset: 0;
		background: linear-gradient(to top, #111, #222222df);
	}
`;

const Main = styled.div`
	height: 100%;
	display: flex;
	flex-direction: column;
	color: white;
`;

const SlidesContainer = styled.div`
	display: flex;
	height: 100%;
	column-gap: 2rem;
	background: #222;
	overflow-x: scroll;
`;

function getFormattedDateStr(dateStr) {
	const date = new Date(dateStr);
	return date.toLocaleDateString('ru-RU', {
		year: 'numeric',
		month: 'short',
		day: 'numeric',
	});
}

export default function GamePage({ gameInfo }) {
	const {
		data: screenshotsData,
		isLoading,
		error,
	} = useSWR(gameScreenshotsURL(gameInfo.slug), fetcher);

	return (
		<>
			<Head>
				<title>{gameInfo.name_original}</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Main>
				<Slider>
					<SlidesContainer>
						{!isLoading &&
							screenshotsData.results.map((s) => (
								<Image
									style={{
										display: 'block',
										width: 'auto',
										height: '100%',
									}}
									alt=""
									src={s.image}
									key={s.id}
									width={s.width}
									height={s.height}
								/>
							))}
					</SlidesContainer>
				</Slider>
				<BackgroundImage src={gameInfo.background_image}>
					<Container>
						<h1>{gameInfo.name}</h1>
						<Info>
							<p>
								Рейтинг:{' '}
								<span>
									<strong>
										{gameInfo.rating === 0
											? 'N/A'
											: gameInfo.rating}
									</strong>
								</span>
							</p>
							<p>
								Дата выхода:{' '}
								<span>
									<strong>
										{gameInfo.released}
									</strong>
								</span>
							</p>
							<p>
								Web-сайт:{' '}
								<span>
									<strong>
										{gameInfo.website !== '' ? (
											<a
												href={
													gameInfo.website
												}
											>
												{gameInfo.website}
											</a>
										) : (
											'N/A'
										)}
									</strong>
								</span>
							</p>
						</Info>
						<Description>
							{parse(gameInfo.description)}
						</Description>
					</Container>
				</BackgroundImage>
			</Main>
		</>
	);
}
